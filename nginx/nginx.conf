user www-data;
worker_processes 4;
pid /var/run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# reverse proxy
	##

	server {

		# Turn off Server header and add optional X-Handler
		server_tokens off;
		more_clear_headers 'Server';
		more_set_headers 'X-Handler: RandomCodes';

		location /proxy {
			resolver 8.8.8.8;
			proxy_pass		http://www.google.at$request_uri;
			proxy_set_header	Host $host;
			proxy_set_header	X-Proxy "set";
			}

		location / {
			rewrite_by_lua '
				res = ngx.location.capture("/proxy")

				-- set headers from response
				for k,v in pairs(res.header) do
					ngx.header[k] = v
					-- record content type for later user
					if string.lower(k) == "content-type" then
						conntype = string.lower(v)
					end	 
				end	

				-- set status code
				-- ngx.status = 404 

				-- status code to ignore
				ignore_codes = {"204", "301", "302", "303", "304", "401"}

				-- status codes for randomisation
				rand_codes = {"200", "201", "203", "206", "207", "300", "305",
						"306", "400", "401", "402", "403", "404", "405",
						"406", "409", "410", "411", "412", "413", "414",
						"415", "416", "417", "418", "420", "422", "423",
						"424", "425", "426", "500", "502", "502", "503",
						"504", "505", "506", "507", "508", "509", "510"}
				if string.find(conntype, "javascript", 1, true) then
					-- dont alter status for Javascript
					ngx.status = 200
				elseif string.find(conntype, "css", 1, true)  then
					-- dont alter status for CSS 
					ngx.status = 200
				elseif ignore_codes[res.status] then
					-- leave alone
					ngx.status = res.status
				else
					ngx.status = rand_codes[math.random(#rand_codes)]
					ngx.header["code"] = ngx.status
				end 

				-- output response body
				ngx.print(res.body)

				-- return control to nginx
				ngx.exit(ngx.HTTP_OK)
				';
			}

	}

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

}
